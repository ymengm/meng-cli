#!/usr/bin/env node
// console.log('meng-cli')     // npm会自动生成执行命令

// 实现脚手架的步骤
// 1.配置可执行命令    commander
const program = require('commander')
const chalk = require('chalk') // 加颜色

// 核心功能  1.创建项目   2.更改配置文件 3.ui界面 @vue-ui

// 格式化参数
const clearArgs = (cmd) => {
  const args = {}
  cmd.options.forEach(o => {
    const key = o.long.slice(2)
    if (cmd[key]) args[key] = cmd[key]
  });
  return args
}

// 万一重名了呢？强制创建的模式 option
program
  .command(`create <app-name>`)
  .description(`create a new project`)
  .option(`-f, --force`, `overwrite target directory if it exists`)
  // .option(`-r, --rule, hahahahah`)
  .action((name, cmd) => {
    // 调用cteater模块去实现
    require('../lib/create.js')(name, clearArgs(cmd))
  })

// vue config --get a
// vue config --set a 1  ->配置文件中
program
  .command(`config [value]`)
  .description(`inspect and modify the config`)
  .option(`-g, --get <path>`, `get value from option`)
  .option(`-s, --set <path> <value>`)
  .option(`-d, --delete <path>`, `delete option from config`)
  .action((value, cmd) => {
    console.log(value, clearArgs(cmd))
  })

program
  .command(`ui`)
  .description(`start and open meng ui`)
  .option(`-p, --port <port>`, `port used for the ui server`)

program
  .version(`meng-cli ${require('../package.json')}.version`)
  .usage(`<command> [option]`)

// 解析用户执行命令时传入的参数

program.on('--help', function () {
  console.log()
  console.log(`Run ${chalk.red('meng <command> --help')} show detail`)
  console.log()
})
program.parse(process.argv)
